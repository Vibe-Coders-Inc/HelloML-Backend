-- vector: already established in schema snippet. safe to run.
CREATE EXTENSION IF NOT EXISTS vector;

-- create indexes for faster searches
CREATE INDEX IF NOT EXISTS ix_chunk_embed_ivfflat
ON public.document_chunk -- build this index on the doc chunk table, as its the nonw with the embedding column
USING ivfflat (embedding vector_cosine_ops) -- tells Postgres to use the IVFFLAT algorithm from the pgvector extension.
                                            -- groups vectos into cluster and searches relevant ones
                                            -- indexing column named "embedding" and using cosine dist
WITH (lists = 100); -- parameter of ivfflat
                    -- more lists = more clusters = better search accuracy (but slower inserts and more memory)
                    -- fewer lists = coarser search (faster, but possibly less accurate)


CREATE INDEX IF NOT EXISTS ix_chunk_docid ON public.document_chunk(document_id); -- for joining document_chunk to document
CREATE INDEX IF NOT EXISTS ix_document_agent_id ON public.document(agent_id);


CREATE OR REPLACE FUNCTION public.match_document_chunks(
    p_agent_id INT, -- agent's whose documents we'll search through
    p_query_embedding VECTOR(1536), -- embedding for query text, generated by openai's embedding mdoel
    p_match_count INT DEFAULT 8, -- how many chunks to return (top k results defaulted to 8)
    p_min_sim FLOAT DEFAULT 0.70 -- min similarity score to dilter out weak matches
)
RETURNS TABLE ( -- return table, each row is a matched chunk
    chunk_id INT,
    document_id INT,
    filename TEXT,
    chunk_text TEXT,
    score FLOAT
)
LANGUAGE sql STABLE as
$$
    SELECT
        c.id AS chunk_id, -- from document_chunk table
        c.document_id,
        d.filename, -- from document table
        c.chunk_text,
        1 - (c.embedding <=> p_query_embedding) AS score -- 1 - cosine distance = cosine similairty
    FROM public.document_chunk c
    JOIN public.document d ON c.document_id = d.id
    WHERE d.agent_id = p_agent_id
    AND c.embedding IS NOT NULL
    AND (1 - (c.embedding <=> p_query_embedding)) >= p_min_sim
    ORDER BY c.embedding <=> p_query_embedding -- lowest cosine distance first  (owest distance = most similar)
    LIMIT p_match_count
$$;